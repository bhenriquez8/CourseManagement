package database;

import bean.Course;
import bean.Teacher;

import java.lang.reflect.Type;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class CourseDAO {

    public static void addCourse (Course course) throws SQLException {
        // get connection from connection pool
        Connection conn =
                DatabaseConnectionFactory.getInstance().getConnection();

        try {
            final String sql = "insert into course (name, credits, teacher_id) values (?,?,?)";
            // create a prepared statement with an option to get autogenerated keys
            PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            // set parameters
            stmt.setString(1, course.getName());
            stmt.setInt(2, course.getCredits());
            if (course.getTeacherID() == 0) {
                stmt.setNull(3, Types.INTEGER);
            } else {
                stmt.setInt(3,course.getTeacherID());
            }

            stmt.execute();

            // get auto-generated keys
            ResultSet rs = stmt.getGeneratedKeys();

            if (rs.next()) {
                course.setId(rs.getInt(1));

                rs.close();
                stmt.close();
            }
        } finally {
            conn.close();
        }
    }

    public List<Course> getCourses() throws SQLException {
        // get connection from connection pool
        Connection conn =
                DatabaseConnectionFactory.getInstance().getConnection();

        List<Course> courses = new ArrayList<Course>();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            // create SQL statement using left outer join
            StringBuilder sb = new StringBuilder("select course._id as courseID, course.name as courseName,")
                    .append("course.credits as credits, teacher._id as teacherId," +
                            "teacher.first_name as firstName, ")
                    .append("teacher.last_name as lastName, teacher.designation as designation ")
                    .append("from course left outer join teacher on ")
                    .append("course.teacher_id = teacher._id ")
                    .append("order by course.name");

            // execute the query
            rs = stmt.executeQuery(sb.toString());

            // iterate over result set and create Course objects
            // add them to the course list
            while (rs.next()) {
                Course course = new Course();
                course.setId(rs.getInt("courseID"));
                course.setName(rs.getString("courseName"));
                course.setCredits(rs.getInt("credits"));

                int teacherId = rs.getInt("teacherId");
                // check whether teacher id was null in the table
                if (rs.wasNull()) { // no teacher set for this course
                    courses.add(course);
                    continue;
                }

                Teacher teacher = new Teacher();
                teacher.setId(teacherId);
                teacher.setFirstName(rs.getString("firstName"));
                teacher.setLastName(rs.getString("lastName"));
                teacher.setDesignation(rs.getString("designation"));
                course.setTeacher(teacher);
                courses.add(course);
            }

            return courses;
        } finally {
            try { if (rs != null) rs.close(); } catch (SQLException e) {}
            try { if (stmt != null) stmt.close();} catch (SQLException e) {}
            try {conn.close();} catch (SQLException e) {}
        }
    }
}
